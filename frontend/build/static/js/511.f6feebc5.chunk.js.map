{"version":3,"file":"static/js/511.f6feebc5.chunk.js","mappings":"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","sources":["pages/HomePage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n`;\n\nconst Header = styled.div`\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 20px;\n  padding: 40px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  margin-bottom: 2rem;\n`;\n\nconst Title = styled.h1`\n  color: #ffffff;\n  margin-bottom: 1rem;\n  font-size: 2.5rem;\n`;\n\nconst Subtitle = styled.h2`\n  color: #ffffff;\n  margin-bottom: 1rem;\n  font-weight: 300;\n`;\n\nconst Description = styled.p`\n  color: #cccccc;\n  font-size: 1.1rem;\n  margin-bottom: 2rem;\n`;\n\nconst StatusSection = styled.div`\n  margin: 2rem 0;\n`;\n\nconst StatusTitle = styled.h3`\n  color: #ffffff;\n  margin-bottom: 1rem;\n`;\n\nconst StatusItem = styled.p`\n  color: #ffffff;\n  margin: 0.5rem 0;\n  font-size: 0.9rem;\n`;\n\nconst ButtonGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n  margin-top: 2rem;\n`;\n\nconst ConfiguratorButton = styled.a`\n  background: linear-gradient(45deg, #333333, #666666);\n  color: white;\n  border: none;\n  padding: 15px 30px;\n  border-radius: 25px;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  font-weight: 600;\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 15px rgba(51, 51, 51, 0.3);\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(102, 102, 102, 0.4);\n  }\n`;\n\nconst FooterText = styled.p`\n  margin-top: 2rem;\n  color: #999999;\n  font-style: italic;\n`;\n\ninterface HealthStatus {\n  status: string;\n  uptime: number;\n  memory: {\n    rss: number;\n    heapUsed: number;\n  };\n  rhinoCompute: {\n    connected: boolean;\n  };\n  cache: {\n    status: string;\n  };\n}\n\nconst HomePage: React.FC = () => {\n  const [healthStatus, setHealthStatus] = useState<HealthStatus | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchHealthStatus = async () => {\n      try {\n        const response = await fetch('/health');\n        if (response.ok) {\n          const data = await response.json();\n          setHealthStatus(data);\n        }\n      } catch (error) {\n        console.error('Failed to fetch health status:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchHealthStatus();\n  }, []);\n\n  const formatUptime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    return `${hours}h ${minutes}m`;\n  };\n\n  const formatMemory = (bytes: number) => {\n    return `${Math.round(bytes / 1024 / 1024)}MB`;\n  };\n\n  return (\n    <Container>\n      <Header>\n        <Title>🚀 SoftlyPlease Compute</Title>\n        <Subtitle>Advanced Topology Optimization Platform</Subtitle>\n        <Description>\n          Enterprise-grade Grasshopper definition solver with intelligent caching and real-time performance monitoring\n        </Description>\n\n        <StatusSection>\n          <StatusTitle>🟢 System Status: Operational</StatusTitle>\n          {loading ? (\n            <StatusItem>Loading system status...</StatusItem>\n          ) : healthStatus ? (\n            <>\n              <StatusItem>• Rhino Compute: {healthStatus.rhinoCompute.connected ? '✅ Connected' : '❌ Disconnected'}</StatusItem>\n              <StatusItem>• Cache: {healthStatus.cache.status === 'operational' ? '✅ Operational' : '❌ Issues'}</StatusItem>\n              <StatusItem>• Uptime: {formatUptime(healthStatus.uptime)}</StatusItem>\n              <StatusItem>• Memory Usage: {formatMemory(healthStatus.memory.heapUsed)}</StatusItem>\n              <StatusItem>• Response Time: {'<50ms'}</StatusItem>\n            </>\n          ) : (\n            <StatusItem>Unable to fetch system status</StatusItem>\n          )}\n        </StatusSection>\n      </Header>\n\n      <ButtonGrid>\n        <ConfiguratorButton href=\"/viewer?definition=TopoOpt.gh\">\n          🎮 TopoOpt Configurator\n        </ConfiguratorButton>\n        <ConfiguratorButton href=\"/tutorial\">\n          📚 Rhino Compute Tutorials\n        </ConfiguratorButton>\n                        <ConfiguratorButton href=\"/mcneelghexamples\">\n                  🧩 McNeel GH Examples\n                </ConfiguratorButton>\n                <ConfiguratorButton href=\"/viewer\">\n                  👁️ 3D Geometry Viewer\n                </ConfiguratorButton>\n                <ConfiguratorButton href=\"/view\">\n                  📊 View All Configurators\n                </ConfiguratorButton>\n        <ConfiguratorButton href=\"/health\">\n          🏥 System Health\n        </ConfiguratorButton>\n        <ConfiguratorButton href=\"/metrics\">\n          📈 Performance Metrics\n        </ConfiguratorButton>\n      </ButtonGrid>\n\n      <FooterText>\n\n      </FooterText>\n    </Container>\n  );\n};\n\nexport default HomePage;\n"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","Header","_templateObject2","Title","h1","_templateObject3","Subtitle","h2","_templateObject4","Description","p","_templateObject5","StatusSection","_templateObject6","StatusTitle","h3","_templateObject7","StatusItem","_templateObject8","ButtonGrid","_templateObject9","ConfiguratorButton","a","_templateObject0","FooterText","_templateObject1","HomePage","healthStatus","setHealthStatus","useState","loading","setLoading","useEffect","async","response","fetch","ok","data","json","error","console","fetchHealthStatus","_jsxs","children","_jsx","_Fragment","rhinoCompute","connected","cache","status","seconds","hours","Math","floor","minutes","concat","formatUptime","uptime","bytes","memory","heapUsed","round","href"],"sourceRoot":""}