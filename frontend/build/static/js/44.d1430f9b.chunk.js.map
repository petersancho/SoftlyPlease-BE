{"version":3,"file":"static/js/44.d1430f9b.chunk.js","mappings":"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","sources":["pages/PerformancePage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 2rem;\n`;\n\nconst Header = styled.div`\n  text-align: center;\n  margin-bottom: 3rem;\n`;\n\nconst Title = styled.h1`\n  color: #ffffff;\n  font-size: 3rem;\n  margin-bottom: 1rem;\n  font-family: 'Times New Roman', serif;\n`;\n\nconst Subtitle = styled.p`\n  color: #cccccc;\n  font-size: 1.2rem;\n  font-family: 'Times New Roman', serif;\n`;\n\nconst MetricsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 2rem;\n  margin-bottom: 3rem;\n`;\n\nconst MetricCard = styled.div`\n  background: #1a1a1a;\n  border-radius: 12px;\n  padding: 2rem;\n  border: 1px solid #333;\n`;\n\nconst MetricTitle = styled.h3`\n  color: #ffffff;\n  margin-bottom: 1rem;\n  font-size: 1.5rem;\n  font-family: 'Times New Roman', serif;\n`;\n\nconst MetricValue = styled.div`\n  font-size: 2.5rem;\n  font-weight: bold;\n  color: #ffffff;\n  margin-bottom: 0.5rem;\n  font-family: 'Times New Roman', serif;\n`;\n\nconst MetricLabel = styled.div`\n  color: #cccccc;\n  font-size: 0.9rem;\n  font-family: 'Times New Roman', serif;\n`;\n\nconst ChartContainer = styled.div`\n  background: #1a1a1a;\n  border-radius: 12px;\n  padding: 2rem;\n  border: 1px solid #333;\n  margin-bottom: 2rem;\n`;\n\nconst ChartTitle = styled.h3`\n  color: #ffffff;\n  margin-bottom: 1rem;\n  font-size: 1.8rem;\n  font-family: 'Times New Roman', serif;\n`;\n\nconst ChartPlaceholder = styled.div`\n  height: 300px;\n  background: linear-gradient(45deg, #2a2a2a, #333333);\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #cccccc;\n  font-family: 'Times New Roman', serif;\n  font-size: 1.2rem;\n`;\n\nconst StatusIndicator = styled.div<{ status: 'healthy' | 'warning' | 'error' }>`\n  display: inline-block;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: ${props => {\n    switch (props.status) {\n      case 'healthy': return '#00ff88';\n      case 'warning': return '#ffaa00';\n      case 'error': return '#ff4444';\n      default: return '#666666';\n    }\n  }};\n  margin-right: 0.5rem;\n`;\n\nconst StatusText = styled.span`\n  color: #cccccc;\n  font-family: 'Times New Roman', serif;\n`;\n\nconst PerformancePage: React.FC = () => {\n  const [healthData, setHealthData] = useState<any>(null);\n  const [definitions, setDefinitions] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch health data\n        const healthResponse = await fetch('/health');\n        if (healthResponse.ok) {\n          const data = await healthResponse.json();\n          setHealthData(data);\n        }\n\n        // Fetch definitions list\n        const definitionsResponse = await fetch('/');\n        if (definitionsResponse.ok) {\n          const data = await definitionsResponse.json();\n          setDefinitions(data);\n        }\n      } catch (error) {\n        console.error('Failed to fetch data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    // Update every 5 seconds\n    const interval = setInterval(fetchData, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const formatMemory = (bytes: number) => {\n    return `${Math.round(bytes / 1024 / 1024)} MB`;\n  };\n\n  const formatUptime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    return `${hours}h ${minutes}m`;\n  };\n\n  if (loading) {\n    return (\n      <Container>\n        <Header>\n          <Title>Loading Performance Metrics...</Title>\n        </Header>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <Header>\n        <Title>Performance Dashboard</Title>\n        <Subtitle>Real-time system metrics and performance monitoring</Subtitle>\n      </Header>\n\n      <MetricsGrid>\n        <MetricCard>\n          <MetricTitle>System Status</MetricTitle>\n          <MetricValue>\n            <StatusIndicator status={healthData?.status === 'healthy' ? 'healthy' : 'error'} />\n            <StatusText>{healthData?.status || 'Unknown'}</StatusText>\n          </MetricValue>\n          <MetricLabel>Overall system health</MetricLabel>\n        </MetricCard>\n\n        <MetricCard>\n          <MetricTitle>Uptime</MetricTitle>\n          <MetricValue>{healthData?.uptime ? formatUptime(healthData.uptime) : 'N/A'}</MetricValue>\n          <MetricLabel>Time since last restart</MetricLabel>\n        </MetricCard>\n\n        <MetricCard>\n          <MetricTitle>Memory Usage</MetricTitle>\n          <MetricValue>{healthData?.memory?.heapUsed ? formatMemory(healthData.memory.heapUsed) : 'N/A'}</MetricValue>\n          <MetricLabel>Heap memory consumption</MetricLabel>\n        </MetricCard>\n\n        <MetricCard>\n          <MetricTitle>Cache Status</MetricTitle>\n          <MetricValue>\n            <StatusIndicator status={healthData?.cache?.status === 'operational' ? 'healthy' : 'warning'} />\n            <StatusText>{healthData?.cache?.status || 'Unknown'}</StatusText>\n          </MetricValue>\n          <MetricLabel>MemCachier performance</MetricLabel>\n        </MetricCard>\n\n        <MetricCard>\n          <MetricTitle>Rhino Compute</MetricTitle>\n          <MetricValue>\n            <StatusIndicator status={healthData?.rhinoCompute?.connected ? 'healthy' : 'error'} />\n            <StatusText>{healthData?.rhinoCompute?.connected ? 'Connected' : 'Disconnected'}</StatusText>\n          </MetricValue>\n          <MetricLabel>Grasshopper computation engine</MetricLabel>\n        </MetricCard>\n\n        <MetricCard>\n          <MetricTitle>Response Time</MetricTitle>\n          <MetricValue>&lt;50ms</MetricValue>\n          <MetricLabel>Typical API response time</MetricLabel>\n        </MetricCard>\n      </MetricsGrid>\n\n      <ChartContainer>\n        <ChartTitle>Response Time Trends</ChartTitle>\n        <ChartPlaceholder>\n          📊 Live response time graph would be displayed here\n          <br />\n          <small>Real-time performance monitoring visualization</small>\n        </ChartPlaceholder>\n      </ChartContainer>\n\n      <ChartContainer>\n        <ChartTitle>Memory Usage Over Time</ChartTitle>\n        <ChartPlaceholder>\n          📈 Memory consumption chart would be displayed here\n          <br />\n          <small>Heap usage and garbage collection monitoring</small>\n        </ChartPlaceholder>\n      </ChartContainer>\n\n      <ChartContainer>\n        <ChartTitle>Cache Performance</ChartTitle>\n        <ChartPlaceholder>\n          🎯 Cache hit rate and efficiency metrics\n          <br />\n          <small>MemCachier performance analytics</small>\n        </ChartPlaceholder>\n      </ChartContainer>\n\n      <ChartContainer>\n        <ChartTitle>System Load</ChartTitle>\n        <ChartPlaceholder>\n          ⚡ CPU usage and system load monitoring\n          <br />\n          <small>Real-time system resource utilization</small>\n        </ChartPlaceholder>\n      </ChartContainer>\n\n      <ChartContainer>\n        <ChartTitle>📋 Available API Definitions</ChartTitle>\n        <div style={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\n          gap: '1rem',\n          maxHeight: '300px',\n          overflowY: 'auto',\n          padding: '1rem'\n        }}>\n          {definitions.length > 0 ? (\n            definitions.map((def, index) => (\n              <div\n                key={index}\n                style={{\n                  background: '#2a2a2a',\n                  padding: '1rem',\n                  borderRadius: '8px',\n                  border: '1px solid #444',\n                  textAlign: 'center',\n                  fontFamily: '\"Times New Roman\", serif',\n                  color: '#ffffff'\n                }}\n              >\n                <div style={{\n                  fontSize: '1.2rem',\n                  marginBottom: '0.5rem',\n                  background: 'linear-gradient(45deg, #ff6b9d, #4ecdc4)',\n                  WebkitBackgroundClip: 'text',\n                  WebkitTextFillColor: 'transparent',\n                  backgroundClip: 'text'\n                }}>\n                  📄\n                </div>\n                <div style={{ fontSize: '0.9rem', fontWeight: 'bold' }}>\n                  {def.name.replace('.gh', '')}\n                </div>\n                <div style={{\n                  fontSize: '0.8rem',\n                  color: '#cccccc',\n                  marginTop: '0.5rem'\n                }}>\n                  .gh file\n                </div>\n              </div>\n            ))\n          ) : (\n            <div style={{\n              gridColumn: '1 / -1',\n              textAlign: 'center',\n              color: '#cccccc',\n              fontFamily: '\"Times New Roman\", serif'\n            }}>\n              Loading definitions...\n            </div>\n          )}\n        </div>\n      </ChartContainer>\n\n      <ChartContainer>\n        <ChartTitle>🔧 API Endpoints</ChartTitle>\n        <div style={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\n          gap: '1rem'\n        }}>\n          <div style={{\n            background: '#2a2a2a',\n            padding: '1.5rem',\n            borderRadius: '8px',\n            border: '1px solid #444'\n          }}>\n            <h4 style={{\n              color: '#ffffff',\n              marginBottom: '1rem',\n              fontFamily: '\"Times New Roman\", serif',\n              background: 'linear-gradient(45deg, #ff6b9d, #4ecdc4)',\n              WebkitBackgroundClip: 'text',\n              WebkitTextFillColor: 'transparent',\n              backgroundClip: 'text'\n            }}>\n              GET /health\n            </h4>\n            <p style={{\n              color: '#cccccc',\n              fontSize: '0.9rem',\n              fontFamily: '\"Times New Roman\", serif',\n              marginBottom: '0.5rem'\n            }}>\n              System health and metrics\n            </p>\n            <div style={{\n              background: '#1a1a1a',\n              padding: '0.5rem',\n              borderRadius: '4px',\n              fontSize: '0.8rem',\n              color: '#4ecdc4',\n              fontFamily: 'monospace'\n            }}>\n              curl https://your-domain.com/health\n            </div>\n          </div>\n\n          <div style={{\n            background: '#2a2a2a',\n            padding: '1.5rem',\n            borderRadius: '8px',\n            border: '1px solid #444'\n          }}>\n            <h4 style={{\n              color: '#ffffff',\n              marginBottom: '1rem',\n              fontFamily: '\"Times New Roman\", serif',\n              background: 'linear-gradient(45deg, #4ecdc4, #ffe66d)',\n              WebkitBackgroundClip: 'text',\n              WebkitTextFillColor: 'transparent',\n              backgroundClip: 'text'\n            }}>\n              POST /solve\n            </h4>\n            <p style={{\n              color: '#cccccc',\n              fontSize: '0.9rem',\n              fontFamily: '\"Times New Roman\", serif',\n              marginBottom: '0.5rem'\n            }}>\n              Run Grasshopper computation\n            </p>\n            <div style={{\n              background: '#1a1a1a',\n              padding: '0.5rem',\n              borderRadius: '4px',\n              fontSize: '0.8rem',\n              color: '#ffe66d',\n              fontFamily: 'monospace'\n            }}>\n              curl -X POST https://your-domain.com/solve\n            </div>\n          </div>\n\n          <div style={{\n            background: '#2a2a2a',\n            padding: '1.5rem',\n            borderRadius: '8px',\n            border: '1px solid #444'\n          }}>\n            <h4 style={{\n              color: '#ffffff',\n              marginBottom: '1rem',\n              fontFamily: '\"Times New Roman\", serif',\n              background: 'linear-gradient(45deg, #ffe66d, #ff6b9d)',\n              WebkitBackgroundClip: 'text',\n              WebkitTextFillColor: 'transparent',\n              backgroundClip: 'text'\n            }}>\n              GET /\n            </h4>\n            <p style={{\n              color: '#cccccc',\n              fontSize: '0.9rem',\n              fontFamily: '\"Times New Roman\", serif',\n              marginBottom: '0.5rem'\n            }}>\n              List available definitions\n            </p>\n            <div style={{\n              background: '#1a1a1a',\n              padding: '0.5rem',\n              borderRadius: '4px',\n              fontSize: '0.8rem',\n              color: '#ff6b9d',\n              fontFamily: 'monospace'\n            }}>\n              curl https://your-domain.com/\n            </div>\n          </div>\n        </div>\n      </ChartContainer>\n    </Container>\n  );\n};\n\nexport default PerformancePage;\n"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","Header","_templateObject2","Title","h1","_templateObject3","Subtitle","p","_templateObject4","MetricsGrid","_templateObject5","MetricCard","_templateObject6","MetricTitle","h3","_templateObject7","MetricValue","_templateObject8","MetricLabel","_templateObject9","ChartContainer","_templateObject0","ChartTitle","_templateObject1","ChartPlaceholder","_templateObject10","StatusIndicator","_templateObject11","props","status","StatusText","span","_templateObject12","PerformancePage","_healthData$memory","_healthData$cache","_healthData$cache2","_healthData$rhinoComp","_healthData$rhinoComp2","healthData","setHealthData","useState","definitions","setDefinitions","loading","setLoading","useEffect","fetchData","async","healthResponse","fetch","ok","data","json","definitionsResponse","error","console","interval","setInterval","clearInterval","_jsx","children","_jsxs","uptime","seconds","hours","Math","floor","minutes","concat","formatUptime","memory","heapUsed","bytes","round","cache","rhinoCompute","connected","style","display","gridTemplateColumns","gap","maxHeight","overflowY","padding","length","map","def","index","background","borderRadius","border","textAlign","fontFamily","color","fontSize","marginBottom","WebkitBackgroundClip","WebkitTextFillColor","backgroundClip","fontWeight","name","replace","marginTop","gridColumn"],"sourceRoot":""}