<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SoftlyPlease - Interactive Grasshopper Definitions</title>
    <script async src="https://unpkg.com/es-module-shims@1.8.0/dist/es-module-shims.js"></script>
    <script type="importmap">
        {
            "imports": {
                "three": "https://unpkg.com/three@0.156.1/build/three.module.js",
                "three/examples/jsm/controls/OrbitControls": "https://unpkg.com/three@0.156.1/examples/jsm/controls/OrbitControls.js",
                "three/examples/jsm/loaders/3DMLoader": "https://unpkg.com/three@0.156.1/examples/jsm/loaders/3DMLoader.js",
                "rhino3dm": "https://unpkg.com/rhino3dm@8.0.0-beta/rhino3dm.module.js"
            }
        }
    </script>
    <style>
        /* Hide scrollbar for clean look */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        ::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Times New Roman', serif;
        }

        body {
            background: white;
            min-height: 100vh;
            color: black;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            padding: 40px 0;
        }

        .header h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            color: black;
            font-weight: normal;
        }

        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
            margin-bottom: 30px;
        }

        /* Navigation Bar */
        .nav-bar {
            background: #1a1a1a;
            padding: 20px 0;
            border-bottom: 4px solid #ff6b35;
            position: sticky;
            top: 0;
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }

        .nav-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .nav-logo {
            color: #ff6b35;
            font-size: 2rem;
            font-weight: bold;
            text-decoration: none;
            font-family: 'Georgia', serif;
        }

        .nav-links {
            display: flex;
            gap: 40px;
            flex-wrap: wrap;
            align-items: center;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            padding: 12px 20px;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-size: 1rem;
            font-weight: normal;
        }

        .nav-links a:hover {
            background: #ff6b35;
            color: white;
            transform: translateY(-2px);
        }

        .nav-dropdown {
            position: relative;
        }

        .nav-dropdown-content {
            display: none;
            position: absolute;
            background: #2a2a2a;
            min-width: 250px;
            border-radius: 8px;
            padding: 15px 0;
            top: 100%;
            left: 0;
            z-index: 1001;
            box-shadow: 0 5px 20px rgba(0,0,0,0.5);
            border: 1px solid #444;
        }

        .nav-dropdown:hover .nav-dropdown-content {
            display: block;
        }

        .nav-dropdown-content a {
            display: block;
            padding: 12px 20px;
            border: none;
            border-radius: 0;
            text-align: left;
            color: #ddd;
        }

        .nav-dropdown-content a:hover {
            background: #ff6b35;
            color: white;
        }

        .main-content {
            margin-top: 40px;
        }

        .definitions-panel {
            background: #f8f8f8;
            border-radius: 10px;
            padding: 30px;
            border: 1px solid #ddd;
        }

        .definitions-panel h2 {
            margin-bottom: 20px;
            font-size: 1.5rem;
        }

        .definition-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }

        .definition-card {
            background: white;
            border: 2px solid #ccc;
            border-radius: 10px;
            padding: 20px;
            transition: all 0.3s ease;
            text-align: center;
            position: relative;
        }

        .definition-card:hover {
            border-color: #666;
            background: #f0f0f0;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .card-btn {
            display: inline-block;
            background: #ff6b35;
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            text-decoration: none;
            font-size: 0.9rem;
            font-weight: normal;
            margin-top: 10px;
            transition: all 0.3s ease;
        }

        .card-btn:hover {
            background: #e55a2b;
            transform: translateY(-1px);
        }

        .definition-card h3 {
            font-size: 0.9rem;
            margin-bottom: 5px;
            word-break: break-word;
        }

        .definition-card p {
            font-size: 0.8rem;
            opacity: 0.7;
        }



        .solve-btn {
            background: #333;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: normal;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .solve-btn:hover {
            background: #555;
            transform: translateY(-1px);
        }

        .status {
            text-align: center;
            padding: 20px;
            margin: 20px 0;
            border-radius: 10px;
            font-weight: normal;
        }

        .status.loading {
            background: #f0f0f0;
            border: 1px solid #999;
            color: #333;
        }

        .status.error {
            background: #ffebee;
            border: 1px solid #f44336;
            color: #c62828;
        }

        .status.success {
            background: #e8f5e8;
            border: 1px solid #4caf50;
            color: #2e7d32;
        }

        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #ddd;
            border-radius: 50%;
            border-top-color: #333;
            animation: spin 1s ease-in-out infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }

            .header h1 {
                font-size: 2rem;
            }

            #viewer {
                height: 300px;
            }
        }

        /* Showcase Section Styles */
        .showcase-section {
            background: #f8f8f8;
            padding: 80px 0;
            margin-top: 60px;
        }

        .examples-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-bottom: 60px;
        }

        .example-card {
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            border: 1px solid #e0e0e0;
            transition: all 0.3s ease;
            text-align: center;
        }

        .example-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.2);
        }

        .example-card h3 {
            color: #333;
            font-size: 1.5rem;
            margin-bottom: 15px;
            font-weight: normal;
        }

        .example-card p {
            color: #666;
            font-size: 1rem;
            margin-bottom: 25px;
            line-height: 1.5;
        }

        .card-btn {
            display: inline-block;
            background: #ff6b35;
            color: white;
            padding: 12px 30px;
            border-radius: 25px;
            text-decoration: none;
            font-weight: normal;
            transition: all 0.3s ease;
            font-size: 1rem;
        }

        .card-btn:hover {
            background: #e55a2b;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255,107,53,0.4);
        }

        .definitions-section {
            margin-top: 80px;
        }

        .definitions-list {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .def-link {
            display: block;
            background: #333;
            color: white;
            padding: 15px 20px;
            border-radius: 10px;
            text-decoration: none;
            text-align: center;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            font-weight: normal;
        }

        .def-link:hover {
            background: #ff6b35;
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(255,107,53,0.3);
        }

        @media (max-width: 768px) {
            .showcase-section {
                padding: 40px 0;
            }

            .examples-grid {
                grid-template-columns: 1fr;
                gap: 20px;
            }

            .definitions-list {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                gap: 15px;
            }

            .example-card {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation Bar -->
    <nav class="nav-bar">
        <div class="nav-container">
            <a href="/" class="nav-logo">SoftlyPlease</a>
            <div class="nav-links">
                <a href="/">Home</a>
                <div class="nav-dropdown">
                    <a href="#" onclick="return false;">Interactive Examples ▼</a>
                    <div class="nav-dropdown-content">
                        <a href="/examples/spikyThing/">Spiky Thing - 3D Geometry</a>
                        <a href="/examples/delaunay/">Delaunay Triangulation</a>
                        <a href="/examples/panels/">Panels</a>
                        <a href="/examples/metaballTable/">Metaball Table</a>
                        <a href="/examples/bendy/">Bendy Grid Shell</a>
                        <a href="/examples/docString/">Documentation</a>
                        <a href="/examples/multi/">Multi Definition</a>
                        <a href="/examples/upload/">File Upload</a>
                        <a href="/examples/valueList/">Value List</a>
                        <a href="/examples/">All Examples</a>
                    </div>
                </div>
                <div class="nav-dropdown">
                    <a href="#" onclick="return false;">Grasshopper Definitions ▼</a>
                    <div class="nav-dropdown-content">
                        <a href="/solve/BranchNodeRnd.gh">Spiky Thing</a>
                        <a href="/solve/delaunay.gh">Delaunay Mesh</a>
                        <a href="/solve/dresser3.gh">Dresser</a>
                        <a href="/solve/metaballTable.gh">Metaball Table</a>
                        <a href="/solve/Bending_gridshell.gh">Bending Grid Shell</a>
                        <a href="/solve/docString.gh">Documentation</a>
                        <a href="/solve/multi.gh">Multi Definition</a>
                        <a href="/solve/upload.gh">Upload</a>
                        <a href="/solve/value_list.gh">Value List</a>
                        <a href="/solve/beam_mod.gh">Beam Modifier</a>
                        <a href="/solve/brep_union.gh">BREP Union</a>
                        <a href="/solve/rnd_lattice.gh">Random Lattice</a>
                        <a href="/solve/rnd_node.gh">Random Node</a>
                        <a href="/solve/srf_kmeans.gh">Surface K-means</a>
                        <a href="/solve/QuadPanelAperture.gh">Quad Panel</a>
                        <a href="/solve/SampleGHConvertTo3dm.gh">Convert to 3DM</a>
                    </div>
                </div>
                <a href="/frontend/">3D Interface</a>
            </div>
        </div>
    </nav>

    <div class="container">
        <div class="header">
            <h1>SoftlyPlease</h1>
            <p>Interactive Grasshopper Definitions - All Pages Available on softlyplease.com</p>
        </div>

        <div class="status" id="status" style="display: none;"></div>

                <div class="main-content">
            <div class="definitions-panel">
                <h2>Grasshopper Definitions</h2>
                <div class="definition-grid" id="definitions">
                    {{#each definitions}}
                    <div class="definition-card">
                        <h3>{{this.displayName}}</h3>
                        <p>{{this.description}}</p>
                        <a href="/solve/{{this.name}}" class="card-btn">Solve Definition</a>
                    </div>
                    {{/each}}
                </div>
                <button class="solve-btn" onclick="loadDefinitions()">Refresh Definitions</button>
            </div>
        </div>
    </div>

    <!-- Showcase Section -->
    <div class="showcase-section">
        <div class="container">
            <h2 style="text-align: center; margin: 50px 0 30px; color: black; font-size: 2.5rem;">Available Grasshopper Examples</h2>

            <div class="examples-grid">
                <div class="example-card">
                    <h3>Spiky Thing</h3>
                    <p>Generate 3D spiky geometry with parametric controls</p>
                    <a href="/examples/spikyThing/" class="card-btn">Try It</a>
                </div>

                <div class="example-card">
                    <h3>Delaunay Triangulation</h3>
                    <p>Create triangulated surfaces from point clouds</p>
                    <a href="/examples/delaunay/" class="card-btn">Try It</a>
                </div>

                <div class="example-card">
                    <h3>Metaball Table</h3>
                    <p>Interactive metaball visualization</p>
                    <a href="/examples/metaballTable/" class="card-btn">Try It</a>
                </div>

                <div class="example-card">
                    <h3>Bending Grid Shell</h3>
                    <p>Generate bending grid shell structures</p>
                    <a href="/examples/bendy/" class="card-btn">Try It</a>
                </div>

                <div class="example-card">
                    <h3>Panels</h3>
                    <p>Panel generation and analysis</p>
                    <a href="/examples/panels/" class="card-btn">Try It</a>
                </div>

                <div class="example-card">
                    <h3>Value List</h3>
                    <p>Work with value list inputs</p>
                    <a href="/examples/valueList/" class="card-btn">Try It</a>
                </div>

                <div class="example-card">
                    <h3>Multi Definition</h3>
                    <p>Select and solve multiple definitions</p>
                    <a href="/examples/multi/" class="card-btn">Try It</a>
                </div>

                <div class="example-card">
                    <h3>File Upload</h3>
                    <p>Upload files as inputs to definitions</p>
                    <a href="/examples/upload/" class="card-btn">Try It</a>
                </div>
            </div>

            <div class="definitions-section">
                <h2 style="text-align: center; margin: 60px 0 30px; color: black; font-size: 2.5rem;">All Grasshopper Definitions</h2>
                <p style="text-align: center; margin-bottom: 40px; color: #666; font-size: 1.1rem;">
                    Direct access to all available Grasshopper definitions for custom parameter solving
                </p>

                <div class="definitions-list">
                    <a href="/solve/BranchNodeRnd.gh" class="def-link">Spiky Thing</a>
                    <a href="/solve/delaunay.gh" class="def-link">Delaunay Mesh</a>
                    <a href="/solve/dresser3.gh" class="def-link">Dresser</a>
                    <a href="/solve/metaballTable.gh" class="def-link">Metaball Table</a>
                    <a href="/solve/Bending_gridshell.gh" class="def-link">Bending Grid Shell</a>
                    <a href="/solve/docString.gh" class="def-link">Documentation</a>
                    <a href="/solve/multi.gh" class="def-link">Multi Definition</a>
                    <a href="/solve/upload.gh" class="def-link">Upload</a>
                    <a href="/solve/value_list.gh" class="def-link">Value List</a>
                    <a href="/solve/beam_mod.gh" class="def-link">Beam Modifier</a>
                    <a href="/solve/brep_union.gh" class="def-link">BREP Union</a>
                    <a href="/solve/rnd_lattice.gh" class="def-link">Random Lattice</a>
                    <a href="/solve/rnd_node.gh" class="def-link">Random Node</a>
                    <a href="/solve/srf_kmeans.gh" class="def-link">Surface K-means</a>
                    <a href="/solve/QuadPanelAperture.gh" class="def-link">Quad Panel</a>
                    <a href="/solve/SampleGHConvertTo3dm.gh" class="def-link">Convert to 3DM</a>
                </div>
            </div>
        </div>
    </div>

    <script type="module">
        import * as THREE from 'three';
        import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
        import rhino3dm from 'rhino3dm';

        // Load definitions from the server
        async function loadDefinitions() {
            try {
                showStatus('Loading definitions...', 'loading');

                // Hardcoded list of available definitions
                const definitions = [
                    { name: 'BranchNodeRnd.gh', displayName: 'Spiky Thing', description: 'Generate parametric spiky spheres with adjustable radius, count, and length parameters.' },
                    { name: 'delaunay.gh', displayName: 'Delaunay', description: 'Create Delaunay triangulation from point clouds. Perfect for mesh generation.' },
                    { name: 'dresser3.gh', displayName: 'Dresser', description: 'Interactive furniture design with width, height, and depth controls.' },
                    { name: 'metaballTable.gh', displayName: 'Metaball Table', description: 'Dynamic table design using metaball algorithms.' },
                    { name: 'bendy.gh', displayName: 'Bendy', description: 'Physics-based deformation using Kangaroo solver.' },
                    { name: 'docString.gh', displayName: 'Documentation', description: 'Advanced example showing Rhino document processing.' },
                    { name: 'multi.gh', displayName: 'Multi', description: 'Dynamic file selection interface.' },
                    { name: 'upload.gh', displayName: 'Upload', description: 'File upload capability demonstration.' },
                    { name: 'valueList.gh', displayName: 'Value List', description: 'Working with value lists as input parameters.' },
                    { name: 'beam_mod.gh', displayName: 'Beam Mod', description: 'Structural beam analysis and modification tools.' },
                    { name: 'brep_union.gh', displayName: 'BREP Union', description: 'Boolean operations on solid geometry.' },
                    { name: 'rnd_lattice.gh', displayName: 'Random Lattice', description: 'Generate random lattice structures.' },
                    { name: 'rnd_node.gh', displayName: 'Random Node', description: 'Node-based random geometry generation.' },
                    { name: 'srf_kmeans.gh', displayName: 'Surface K-means', description: 'Surface analysis using K-means clustering.' },
                    { name: 'Bending_gridshell.gh', displayName: 'Grid Shell', description: 'Grid shell bending analysis and visualization.' },
                    { name: 'QuadPanelAperture.gh', displayName: 'Quad Panel', description: 'Quad panel systems with aperture control.' },
                    { name: 'SampleGHConvertTo3dm.gh', displayName: 'Convert to 3DM', description: 'Conversion utilities for Grasshopper to Rhino.' }
                ];

                const definitionsContainer = document.getElementById('definitions');
                definitionsContainer.innerHTML = '';

                definitions.forEach(def => {
                    const card = document.createElement('div');
                    card.className = 'definition-card';

                    card.innerHTML = `
                        <h3>${def.displayName}</h3>
                        <p>${def.description}</p>
                        <a href="/solve/${def.name}" class="card-btn">Solve Definition</a>
                    `;

                    definitionsContainer.appendChild(card);
                });

                showStatus('Definitions loaded successfully!', 'success');
                setTimeout(() => hideStatus(), 2000);

            } catch (error) {
                showStatus('Error loading definitions: ' + error.message, 'error');
                console.error('Error:', error);
            }
        }

        // Status functions
        function showStatus(message, type) {
            const statusEl = document.getElementById('status');
            statusEl.textContent = message;
            statusEl.className = `status ${type}`;
            statusEl.style.display = 'block';
        }

        function hideStatus() {
            document.getElementById('status').style.display = 'none';
        }

        // Initialize the application
        window.addEventListener('load', async () => {
            await loadDefinitions();
        });
    </script>
</body>
</html>
                    console.log('No geometry in result:', result);
                    setTimeout(() => hideStatus(), 3000);
                }

            } catch (error) {
                showStatus('Error solving definition: ' + error.message, 'error');
                console.error('Error:', error);
            }
        }

        // Render geometry in the viewer
        function renderGeometry(data) {
            // Clear previous geometry
            scene.children = scene.children.filter(child => child.type === 'Light' || child.type === 'Mesh' || child.type === 'Line');

            if (!data || !data.values || data.values.length === 0) {
                console.log('No geometry data to render');
                return;
            }

            // Process each output value
            data.values.forEach((value, index) => {
                if (value.InnerTree && value.InnerTree['{0;0}']) {
                    value.InnerTree['{0;0}'].forEach(item => {
                        if (item.data) {
                            try {
                                // Parse rhino3dm data
                                const rhinoObject = rhino3dm.CommonObject.decode(JSON.parse(item.data));
                                if (rhinoObject) {
                                    // Convert to Three.js mesh
                                    if (rhinoObject.objectType === rhino3dm.ObjectType.Mesh) {
                                        const geometry = convertRhinoMeshToThree(rhinoObject);
                                        if (geometry) {
                                            const material = new THREE.MeshLambertMaterial({
                                                color: new THREE.Color().setHSL(index * 0.1, 0.7, 0.5),
                                                transparent: true,
                                                opacity: 0.8
                                            });
                                            const mesh = new THREE.Mesh(geometry, material);
                                            scene.add(mesh);
                                        }
                                    } else if (rhinoObject.objectType === rhino3dm.ObjectType.Brep) {
                                        // Handle Brep geometry
                                        const mesh = rhinoObject.getMesh();
                                        if (mesh) {
                                            const geometry = convertRhinoMeshToThree(mesh);
                                            if (geometry) {
                                                const material = new THREE.MeshLambertMaterial({
                                                    color: new THREE.Color().setHSL(index * 0.1, 0.7, 0.5),
                                                    transparent: true,
                                                    opacity: 0.8
                                                });
                                                const meshObj = new THREE.Mesh(geometry, material);
                                                scene.add(meshObj);
                                            }
                                        }
                                    }
                                }
                            } catch (error) {
                                console.error('Error parsing geometry:', error);
                            }
                        }
                    });
                }
            });

            // Fit camera to scene
            if (scene.children.length > 2) { // More than just lights
                const box = new THREE.Box3().setFromObject(scene);
                const center = box.getCenter(new THREE.Vector3());
                const size = box.getSize(new THREE.Vector3());

                if (size.length() > 0) {
                    camera.position.copy(center);
                    camera.position.add(new THREE.Vector3(size.x * 2, size.y * 2, size.z * 2));
                    camera.lookAt(center);
                    controls.target.copy(center);
                    controls.update();
                }
            }
        }

        // Convert Rhino mesh to Three.js geometry
        function convertRhinoMeshToThree(rhinoMesh) {
            const vertices = [];
            const faces = [];

            // Get vertices
            for (let i = 0; i < rhinoMesh.vertices().count; i++) {
                const vertex = rhinoMesh.vertices().get(i);
                vertices.push(vertex.x, vertex.y, vertex.z);
            }

            // Get faces
            for (let i = 0; i < rhinoMesh.faces().count; i++) {
                const face = rhinoMesh.faces().get(i);
                if (face.isQuad) {
                    // Convert quad to two triangles
                    faces.push(face.a, face.b, face.c);
                    faces.push(face.a, face.c, face.d);
                } else {
                    faces.push(face.a, face.b, face.c);
                }
            }

            if (vertices.length === 0 || faces.length === 0) {
                return null;
            }

            const geometry = new THREE.BufferGeometry();
            geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
            geometry.setIndex(faces);
            geometry.computeVertexNormals();

            return geometry;
        }

        // Status functions
        function showStatus(message, type) {
            const statusEl = document.getElementById('status');
            statusEl.textContent = message;
            statusEl.className = `status ${type}`;
            statusEl.style.display = 'block';
        }

        function hideStatus() {
            document.getElementById('status').style.display = 'none';
        }

        // Initialize the application
        window.addEventListener('load', async () => {
            // Initialize rhino3dm
            try {
                rhino3dm = await rhino3dm();
                console.log('rhino3dm initialized');
            } catch (error) {
                console.error('Failed to initialize rhino3dm:', error);
                showStatus('Failed to initialize 3D viewer', 'error');
                return;
            }

            initViewer();
            await loadDefinitions();
        });

        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / 2 / 500;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth / 2, 500);
        });
    </script>
</body>
</html>
