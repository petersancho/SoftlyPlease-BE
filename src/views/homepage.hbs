<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SoftlyPlease - Interactive Grasshopper Definitions</title>
    <script async src="https://unpkg.com/es-module-shims@1.8.0/dist/es-module-shims.js"></script>
    <script type="importmap">
        {
            "imports": {
                "three": "https://unpkg.com/three@0.156.1/build/three.module.js",
                "three/examples/jsm/controls/OrbitControls": "https://unpkg.com/three@0.156.1/examples/jsm/controls/OrbitControls.js",
                "three/examples/jsm/loaders/3DMLoader": "https://unpkg.com/three@0.156.1/examples/jsm/loaders/3DMLoader.js",
                "rhino3dm": "https://unpkg.com/rhino3dm@8.0.0-beta/rhino3dm.module.js"
            }
        }
    </script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Times New Roman', serif;
        }


        body {
            background: white;
            min-height: 100vh;
            color: black;
        }


        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }


        .header {
            text-align: center;
            padding: 40px 0;
        }


        .header h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            color: black;
            font-weight: normal;
        }


        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
            margin-bottom: 30px;
        }


        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-top: 40px;
        }


        .definitions-panel {
            background: #f8f8f8;
            border-radius: 10px;
            padding: 30px;
            border: 1px solid #ddd;
        }


        .definitions-panel h2 {
            margin-bottom: 20px;
            font-size: 1.5rem;
        }


        .definition-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }


        .definition-card {
            background: white;
            border: 2px solid #ccc;
            border-radius: 10px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
        }


        .definition-card:hover {
            border-color: #666;
            background: #f0f0f0;
            transform: translateY(-2px);
        }


        .definition-card.selected {
            border-color: #333;
            background: #e0e0e0;
        }


        .definition-card h3 {
            font-size: 0.9rem;
            margin-bottom: 5px;
            word-break: break-word;
        }


        .definition-card p {
            font-size: 0.8rem;
            opacity: 0.7;
        }


        .parameters-panel {
            background: #f8f8f8;
            border-radius: 10px;
            padding: 30px;
            border: 1px solid #ddd;
        }


        .parameters-panel h2 {
            margin-bottom: 20px;
            font-size: 1.5rem;
        }


        .parameter {
            margin-bottom: 25px;
        }


        .parameter label {
            display: block;
            margin-bottom: 8px;
            font-weight: normal;
        }


        .parameter input {
            width: 100%;
            padding: 12px;
            border: 2px solid #ccc;
            border-radius: 8px;
            background: white;
            color: black;
            font-size: 1rem;
        }


        .parameter input:focus {
            outline: none;
            border-color: #666;
        }


        .parameter input::placeholder {
            color: #888;
        }


        .solve-btn {
            width: 100%;
            padding: 15px;
            background: #333;
            border: none;
            border-radius: 10px;
            color: white;
            font-size: 1.1rem;
            font-weight: normal;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 20px;
        }


        .solve-btn:hover {
            background: #555;
            transform: translateY(-2px);
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3);
        }


        .solve-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
            background: #999;
        }


        .viewer-panel {
            grid-column: 1 / -1;
            background: #f8f8f8;
            border-radius: 10px;
            padding: 30px;
            border: 1px solid #ddd;
            margin-top: 30px;
        }


        .viewer-panel h2 {
            margin-bottom: 20px;
            font-size: 1.5rem;
        }


        #viewer {
            width: 100%;
            height: 500px;
            background: #f0f0f0;
            border-radius: 10px;
            border: 2px solid #ddd;
        }


        .status {
            text-align: center;
            padding: 20px;
            margin: 20px 0;
            border-radius: 10px;
            font-weight: normal;
        }


        .status.loading {
            background: #f0f0f0;
            border: 1px solid #999;
            color: #333;
        }


        .status.error {
            background: #ffebee;
            border: 1px solid #f44336;
            color: #c62828;
        }


        .status.success {
            background: #e8f5e8;
            border: 1px solid #4caf50;
            color: #2e7d32;
        }


        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #ddd;
            border-radius: 50%;
            border-top-color: #333;
            animation: spin 1s ease-in-out infinite;
            margin-right: 10px;
        }


        @keyframes spin {
            to { transform: rotate(360deg); }
        }


        /* Navigation Bar */
        .nav-bar {
            background: #1a1a1a;
            padding: 20px 0;
            border-bottom: 4px solid white;
            position: sticky;
            top: 0;
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }


        .nav-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }


        .nav-logo {
            color: white;
            font-size: 2rem;
            font-weight: bold;
            text-decoration: none;
            font-family: 'Georgia', serif;
        }


        .nav-links {
            display: flex;
            gap: 40px;
            flex-wrap: wrap;
            align-items: center;
        }


        .nav-links a {
            color: white;
            text-decoration: none;
            padding: 12px 20px;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-size: 1rem;
            font-weight: normal;
        }


        .nav-links a:hover {
            background: white;
            color: black;
            transform: translateY(-2px);
        }





        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }


            .header h1 {
                font-size: 2rem;
            }


            #viewer {
                height: 300px;
            }


            .nav-container {
                padding: 0 15px;
            }


            .nav-links {
                gap: 20px;
            }


            .nav-links a {
                padding: 8px 12px;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation Bar -->
    <nav class="nav-bar">
        <div class="nav-container">
            <a href="/" class="nav-logo">SoftlyPlease</a>
            <div class="nav-links">
                <a href="/">HOME</a>
                <a href="/examples/">MCNEEL EXAMPLES</a>
            </div>
        </div>
    </nav>


    <div class="container">
        <div class="header">
            <h1>SoftlyPlease</h1>
            <p>Interactive Grasshopper Definitions</p>
        </div>


        <div class="status" id="status" style="display: none;"></div>


        <div class="main-content">
            <div class="definitions-panel">
                <h2>Grasshopper Definitions</h2>
                <div class="definition-grid" id="definitions"></div>
                <button class="solve-btn" onclick="loadDefinitions()">Refresh Definitions</button>
            </div>


            <div class="parameters-panel">
                <h2>Parameters</h2>
                <div id="parameters"></div>
                <button class="solve-btn" id="solveBtn" onclick="solveDefinition()" disabled>Solve Definition</button>
            </div>
        </div>


        <div class="viewer-panel">
            <h2>3D Viewer</h2>
            <div id="viewer"></div>
        </div>
    </div>


    <script type="module">
        import * as THREE from 'three';
        import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
        import rhino3dm from 'rhino3dm';


        let selectedDefinition = null;
        let scene, camera, renderer, controls;
        let rhino = null;


        // Initialize Three.js scene
        function initViewer() {
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0xffffff);


            camera = new THREE.PerspectiveCamera(75, window.innerWidth / 2 / 500, 0.1, 1000);
            camera.position.set(50, 50, 50);


            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth / 2, 500);
            document.getElementById('viewer').appendChild(renderer.domElement);


            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;


            // Add lights
            const ambientLight = new THREE.AmbientLight(0x666666, 0.8);
            scene.add(ambientLight);


            const directionalLight = new THREE.DirectionalLight(0x999999, 0.6);
            directionalLight.position.set(1, 1, 1);
            scene.add(directionalLight);


            animate();
        }


        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        }


        // Load definitions from the server
        async function loadDefinitions() {
            try {
                showStatus('Loading definitions...', 'loading');


                const response = await fetch('https://softlyplease.com/');
                const definitions = await response.json();


                const container = document.getElementById('definitions');
                container.innerHTML = '';


                definitions.forEach(def => {
                    const card = document.createElement('div');
                    card.className = 'definition-card';
                    card.onclick = () => selectDefinition(def.name);


                    card.innerHTML = `
                        <h3>${def.name}</h3>
                        <p>Grasshopper Definition</p>
                    `;


                    container.appendChild(card);
                });


                showStatus('Definitions loaded successfully!', 'success');
                setTimeout(() => hideStatus(), 2000);


            } catch (error) {
                showStatus('Error: ' + error.message, 'error');
                console.error('Error:', error);
            }
        }


        // Select a definition
        async function selectDefinition(name) {
            selectedDefinition = name;


            // Update UI
            document.querySelectorAll('.definition-card').forEach(card => {
                card.classList.remove('selected');
                if (card.querySelector('h3').textContent === name) {
                    card.classList.add('selected');
                }
            });


            // Load definition details
            try {
                showStatus('Loading definition details...', 'loading');


                const response = await fetch(`https://softlyplease.com/definition/${name}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }


                const details = await response.json();


                const parametersContainer = document.getElementById('parameters');
                parametersContainer.innerHTML = '';


                if (details.inputs) {
                    details.inputs.forEach(input => {
                        const paramDiv = document.createElement('div');
                        paramDiv.className = 'parameter';


                        paramDiv.innerHTML = `
                            <label for="${input.name}">${input.name} (${input.type})</label>
                            <input type="number" id="${input.name}" placeholder="Enter value"
                                   step="0.1" value="${input.default || 50}">
                        `;


                        parametersContainer.appendChild(paramDiv);
                    });
                }


                document.getElementById('solveBtn').disabled = false;
                showStatus('Definition loaded! Adjust parameters and click Solve.', 'success');
                setTimeout(() => hideStatus(), 3000);


            } catch (error) {
                showStatus('Error: ' + error.message, 'error');
                console.error('Error:', error);
            }
        }


        // Solve the definition
        async function solveDefinition() {
            if (!selectedDefinition) return;


            try {
                showStatus('Solving definition...', 'loading');


                // Collect parameters
                const params = new URLSearchParams();
                document.querySelectorAll('#parameters input').forEach(input => {
                    params.append(input.id, input.value);
                });


                console.log('Solving definition:', selectedDefinition, 'with params:', params.toString());


                // Send solve request
                const response = await fetch(`https://softlyplease.com/solve/${selectedDefinition}?${params.toString()}`);


                console.log('Response status:', response.status);


                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status} ${response.statusText}`);
                }


                const result = await response.json();
                console.log('Result:', result);


                // Render the result if it's geometry data
                if (result && result.values && result.values.length > 0) {
                    showStatus('Definition solved successfully!', 'success');
                    renderGeometry(result);
                    setTimeout(() => hideStatus(), 3000);
                } else {
                    showStatus('Definition solved but no geometry returned.', 'success');
                    console.log('No geometry in result:', result);
                    setTimeout(() => hideStatus(), 3000);
                }


            } catch (error) {
                showStatus('Error solving definition: ' + error.message, 'error');
                console.error('Error:', error);
            }
        }


        // Render geometry in the viewer
        function renderGeometry(data) {
            // Clear previous geometry
            scene.children = scene.children.filter(child => child.type === 'Light' || child.type === 'Mesh' || child.type === 'Line');


            if (!data || !data.values || data.values.length === 0) {
                console.log('No geometry data to render');
                return;
            }


            // Process each output value
            data.values.forEach((value, index) => {
                if (value.InnerTree && value.InnerTree['{0;0}']) {
                    value.InnerTree['{0;0}'].forEach(item => {
                        if (item.data) {
                            try {
                                // Parse rhino3dm data
                                const rhinoObject = rhino.CommonObject.decode(JSON.parse(item.data));
                                if (rhinoObject) {
                                    // Convert to Three.js mesh
                                    if (rhinoObject.objectType === rhino.ObjectType.Mesh) {
                                        const geometry = convertRhinoMeshToThree(rhinoObject);
                                        if (geometry) {
                                            const material = new THREE.MeshLambertMaterial({
                                                color: new THREE.Color().setHSL(index * 0.1, 0.7, 0.5),
                                                transparent: true,
                                                opacity: 0.8
                                            });
                                            const mesh = new THREE.Mesh(geometry, material);
                                            scene.add(mesh);
                                        }
                                    } else if (rhinoObject.objectType === rhino.ObjectType.Brep) {
                                        // Handle Brep geometry
                                        const mesh = rhinoObject.getMesh();
                                        if (mesh) {
                                            const geometry = convertRhinoMeshToThree(mesh);
                                            if (geometry) {
                                                const material = new THREE.MeshLambertMaterial({
                                                    color: new THREE.Color().setHSL(index * 0.1, 0.7, 0.5),
                                                    transparent: true,
                                                    opacity: 0.8
                                                });
                                                const meshObj = new THREE.Mesh(geometry, material);
                                                scene.add(meshObj);
                                            }
                                        }
                                    }
                                }
                            } catch (error) {
                                console.error('Error parsing geometry:', error);
                            }
                        }
                    });
                }
            });


            // Fit camera to scene
            if (scene.children.length > 2) { // More than just lights
                const box = new THREE.Box3().setFromObject(scene);
                const center = box.getCenter(new THREE.Vector3());
                const size = box.getSize(new THREE.Vector3());


                if (size.length() > 0) {
                    camera.position.copy(center);
                    camera.position.add(new THREE.Vector3(size.x * 2, size.y * 2, size.z * 2));
                    camera.lookAt(center);
                    controls.target.copy(center);
                    controls.update();
                }
            }
        }


        // Convert Rhino mesh to Three.js geometry
        function convertRhinoMeshToThree(rhinoMesh) {
            const vertices = [];
            const faces = [];


            // Get vertices
            for (let i = 0; i < rhinoMesh.vertices().count; i++) {
                const vertex = rhinoMesh.vertices().get(i);
                vertices.push(vertex.x, vertex.y, vertex.z);
            }


            // Get faces
            for (let i = 0; i < rhinoMesh.faces().count; i++) {
                const face = rhinoMesh.faces().get(i);
                if (face.isQuad) {
                    // Convert quad to two triangles
                    faces.push(face.a, face.b, face.c);
                    faces.push(face.a, face.c, face.d);
                } else {
                    faces.push(face.a, face.b, face.c);
                }
            }


            if (vertices.length === 0 || faces.length === 0) {
                return null;
            }


            const geometry = new THREE.BufferGeometry();
            geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
            geometry.setIndex(faces);
            geometry.computeVertexNormals();


            return geometry;
        }


        // Status functions
        function showStatus(message, type) {
            const statusEl = document.getElementById('status');
            statusEl.textContent = message;
            statusEl.className = `status ${type}`;
            statusEl.style.display = 'block';


            if (type === 'loading') {
                statusEl.innerHTML = '<div class="loading-spinner"></div>' + message;
            }
        }


        function hideStatus() {
            document.getElementById('status').style.display = 'none';
        }


        // Initialize the application
        window.addEventListener('load', async () => {
            // Initialize rhino3dm
            try {
                rhino = await rhino3dm();
                console.log('rhino3dm initialized');
            } catch (error) {
                console.error('Failed to initialize rhino3dm:', error);
                showStatus('Failed to initialize 3D viewer', 'error');
                return;
            }


            initViewer();
            await loadDefinitions();
        });


        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / 2 / 500;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth / 2, 500);
        });
    </script>
</body>
</html>
